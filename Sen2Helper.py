# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Sentinel2Helper
                                 A QGIS plugin
 This plugin downloads Sentinel-2 satellite imagery and processes to Level-2A.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-09-07
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Patrick Sogno
        email                : patrick.sogno@stud-mail.uni-wuerzburg.de
 ***************************************************************************/
/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os
import os.path
import wget
import fiona


from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog
from qgis.core import QgsProject

# Initialize Qt resources from file resources.py
from .functions4Sen2Helper import *  # I did this to load the functions of the other script

# Import the code for the dialog
from .Sen2Helper_dialog import Sentinel2HelperDialog
from . import resources

# noinspection SpellCheckingInspection


class Sentinel2Helper:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.
        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value("locale/userLocale")[0:2]
        locale_path = os.path.join(
            self.plugin_dir, "i18n", "Sentinel2Helper_{}.qm".format(locale)
        )

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u"&Sentinel2Helper")

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.
        We implement this ourselves since we do not inherit QObject.
        :param message: String for translation.
        :type message: str, QString
        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate("Sentinel2Helper", message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None,
    ):

        """Add a toolbar icon to the toolbar.
        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str
        :param text: Text that should be shown in menu items for this action.
        :type text: str
        :param callback: Function to be called when the action is triggered.
        :type callback: function
        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool
        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool
        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool
        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str
        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget
        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.
        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(self.menu, action)

        self.actions.append(action)
        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ":/plugins/sen2pre/icon.png"
        self.add_action(
            icon_path,
            text=self.tr(u"Sentinel2Helper"),
            callback=self.run,
            parent=self.iface.mainWindow(),
        )

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(self.tr(u"&Sentinel2Helper"), action)
            self.iface.removeToolBarIcon(action)

    def select_output_file(self):
        """Opens the file manager and sets directory to user-made output file name."""
        output_dir = QFileDialog.getExistingDirectory(
            self.dlg
        )  # This should actually lead to a directory only!
        self.dlg.SelectOutputDirName.setText(output_dir)

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start:
            self.first_start = False
            self.dlg = Sentinel2HelperDialog()
            # Input:
            # layers = QgsProject.instance().layerTreeRoot().children()
            # self.dlg.SelectLayer4ROIfromLayers.clear()
            # self.dlg.SelectLayer4ROIfromLayers.addItems([layer.name() for layer in layers])

            # Output:
            self.dlg.SelectOutputDirName.clicked.connect(
                self.select_output_file
            )  # This should let me choose a dir!

            # API configuration:
            self.dlg.Username.clear()
            self.dlg.Password.clear()

        # Fetch the currently loaded layers
        layers = QgsProject.instance().layerTreeRoot().children()
        # Clear the contents of the comboBox from previous runs
        self.dlg.SelectLayer4ROIfromLayers.clear()  # comboBox_4 is the box under "Select Layer for ROI"
        # Populate the comboBox with names of all the loaded layers
        self.dlg.SelectLayer4ROIfromLayers.addItems([layer.name() for layer in layers])

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Check whether orbit kml exists and download if it doesn't
            s2grid = "S2A_OPER_GIP_TILPAR_MPC__20151209T095117_V20150622T000000_21000101T000000_B00.kml"
            if not os.path.isfile(s2grid):
                url = "https://sentinel.esa.int/documents/247904/1955685/" + s2grid
                s2grid = wget.download(url=url)
            # Read orbit kml
            gpd.io.file.fiona.drvsupport.supported_drivers["KML"] = "rw"
            s2df = gpd.read_file(s2grid, driver="KML")

            output_dir = self.dlg.SelectOutputDirName.text()
            username = self.dlg.Username.text()
            password = self.dlg.Password.text()
            selectedlayerindex = self.dlg.SelectLayer4ROIfromLayers.currentIndex()
            min_time = self.dlg.StartDate.date()
            mit = min_time.toPyDate()
            max_time = self.dlg.EndDate.date()
            mxt = max_time.toPyDate()
            roi = layers[selectedlayerindex].layer()
            shp = roi.dataProvider().dataSourceUri()
            shp_path = shp.split("|")[0]
            roi_df = ReprojectGivenROI(shp_path)
            tilelist = Sen2ROIIntersects(s2df, roi_df)
            sen2cor = "./" + CheckSen2Cor()

            if self.dlg.DL_L1CRadioButton.isChecked():
                level_string = "S2MSI1C"
            if self.dlg.DL_L2ARadioButton.isChecked():
                level_string = "S2MSI2A"

            query_kwargs = EnterInv(tmininput=mit, tmaxinput=mxt, level_string=level_string)
            api = EnterUsrData(usr_input=username, pw_input=password)
            S2L1CDL(
                tilelist=tilelist, query_kwargs=query_kwargs, api=api, s2path=output_dir
            )
            # Pre-process rasters in output directory
            if self.dlg.L1C2L2A_CheckBox.isChecked():
                L2ABatchProcess(s2c_dir=sen2cor, s2_path=output_dir)
